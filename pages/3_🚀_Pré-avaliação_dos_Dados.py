
    # Configura√ß√£o inicial
    st.set_page_config(layout="wide")
    st.title("üîç Pr√©-An√°lise de Dados Interativa")
    

    # Op√ß√µes para carregar dados
    with st.expander("üì§ Carregar Dados", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            # Op√ß√£o 1: Usar dados existentes na session_state
            if 'dados' in st.session_state:
                st.write("Dados existentes carregados:")
                st.write(f"Shape: {st.session_state.dados.shape}")
                if st.button("Continuar usando estes dados"):
                    df = st.session_state.dados
                    st.success("Continuando com os dados existentes!")
            else:
                st.warning("Nenhum dado carregado na sess√£o atual")
        
        with col2:
            # Op√ß√£o 2: Fazer novo upload
            uploaded_file = st.file_uploader("Ou carregue novo arquivo CSV", type=["csv"])
            if uploaded_file is not None:
                df = pd.read_csv(uploaded_file)
                st.session_state.dados = df  # Armazena na session_state
                st.success("Novo dataset carregado com sucesso!")

        # Mostra preview dos dados
        st.subheader("Visualiza√ß√£o dos Dados")
        st.dataframe(df.head(), use_container_width=True)
        
    # Verifica se temos dados para trabalhar
    if 'df' not in locals():
        st.warning("Por favor, carregue dados para continuar")
        st.stop()
    
    # Fun√ß√£o para download do DataFrame
    def convert_df_to_csv(df):
        output = BytesIO()
        df.to_csv(output, index=False, encoding='utf-8')
        output.seek(0)
        return output.getvalue()
    
    # An√°lise Interativa
    tab1, tab2, tab3, tab4 = st.tabs([
        "üîé Identificar Problemas", 
        "‚úèÔ∏è Corrigir Dados", 
        "üìä Resumo das A√ß√µes", 
        "üíæ Exportar Dados"
    ])
    
    with tab1:
        st.header("Identifica√ß√£o de Problemas nos Dados")
        
        analysis_type = st.radio("Selecione o tipo de an√°lise:", [
            "Dados Faltantes", 
            "Dados Inconsistentes", 
            "Outliers/Valores Extremos"
        ], horizontal=True)
        
        if analysis_type == "Dados Faltantes":
            missing = st.session_state.dados.isnull().sum()
            missing = missing[missing > 0]
            
            if not missing.empty:
                st.warning("‚ö†Ô∏è Dados Faltantes Detectados:")
                st.dataframe(missing.rename("Quantidade"), use_container_width=True)
                
                # Visualiza√ß√£o gr√°fica
                st.subheader("Mapa de Dados Faltantes")
                st.bar_chart(missing)
            else:
                st.success("‚úÖ Nenhum dado faltante encontrado!")
        
        elif analysis_type == "Dados Inconsistentes":
            st.subheader("An√°lise de Inconsist√™ncias")
            
            # Identificar colunas com poss√≠veis inconsist√™ncias
            text_cols = st.session_state.dados.select_dtypes(include=['object']).columns
            num_cols = st.session_state.dados.select_dtypes(include=np.number).columns
            
            col_to_analyze = st.selectbox("Selecione a coluna para an√°lise:", text_cols.union(num_cols))
            
            if col_to_analyze in text_cols:
                # An√°lise para colunas textuais
                value_counts = st.session_state.dados[col_to_analyze].value_counts()
                st.dataframe(value_counts, use_container_width=True)
                
                # Identificar valores √∫nicos para poss√≠vel padroniza√ß√£o
                st.write("Valores √∫nicos encontrados:")
                st.write(st.session_state.dados[col_to_analyze].unique())
            else:
                # An√°lise para colunas num√©ricas
                st.write(f"Estat√≠sticas descritivas para {col_to_analyze}:")
                st.write(st.session_state.dados[col_to_analyze].describe())
                
                # Identificar poss√≠veis outliers
                q1 = st.session_state.dados[col_to_analyze].quantile(0.25)
                q3 = st.session_state.dados[col_to_analyze].quantile(0.75)
                iqr = q3 - q1
                lower_bound = q1 - 1.5 * iqr
                upper_bound = q3 + 1.5 * iqr
                
                outliers = st.session_state.dados[
                    (st.session_state.dados[col_to_analyze] < lower_bound) | 
                    (st.session_state.dados[col_to_analyze] > upper_bound)
                ]
                
                if not outliers.empty:
                    st.warning(f"‚ö†Ô∏è Poss√≠veis outliers detectados em {col_to_analyze}:")
                    st.dataframe(outliers, use_container_width=True)
                else:
                    st.success(f"‚úÖ Nenhum outlier detectado em {col_to_analyze}")
    
    with tab2:
        st.header("Corre√ß√£o de Dados")
        
        correction_type = st.radio("Tipo de corre√ß√£o:", [
            "Remover Dados", 
            "Substituir Valores", 
            "Preencher Valores Faltantes"
        ], horizontal=True)
        
        col_to_correct = st.selectbox(
            "Selecione a coluna para corre√ß√£o:", 
            st.session_state.dados.columns
        )
        
        if correction_type == "Remover Dados":
            remove_option = st.radio("Remover:", [
                "Linhas com valores faltantes", 
                "Linhas com valores espec√≠ficos"
            ])
            
            if remove_option == "Linhas com valores espec√≠ficos":
                if st.session_state.dados[col_to_correct].dtype == 'object':
                    values_to_remove = st.multiselect(
                        "Selecione os valores a remover:", 
                        st.session_state.dados[col_to_correct].unique()
                    )
                else:
                    min_val = float(st.session_state.dados[col_to_correct].min())
                    max_val = float(st.session_state.dados[col_to_correct].max())
                    values_to_remove = st.slider(
                        "Selecione o intervalo de valores a remover:", 
                        min_val, max_val, (min_val, max_val)
                    )
            if 'actions_log' not in st.session_state:
                st.session_state.actions_log = []
            if st.button("Aplicar Remo√ß√£o"):
                if remove_option == "Linhas com valores faltantes":
                    initial_count = len(st.session_state.dados)
                    st.session_state.dados = st.session_state.dados.dropna(subset=[col_to_correct])
                    removed_count = initial_count - len(st.session_state.dados)
                    
                    # Registrar a√ß√£o
                    action = {
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'action': f"Removidas {removed_count} linhas com valores faltantes na coluna {col_to_correct}",
                        'type': "Remo√ß√£o"
                    }
                    st.session_state.actions_log.append(action)
                    st.success(f"Removidas {removed_count} linhas com valores faltantes!")
                
                elif remove_option == "Linhas com valores espec√≠ficos" and values_to_remove:
                    initial_count = len(st.session_state.dados)
                    
                    if isinstance(values_to_remove, tuple):
                        mask = (st.session_state.dados[col_to_correct] >= values_to_remove[0]) & \
                               (st.session_state.dados[col_to_correct] <= values_to_remove[1])
                    else:
                        mask = st.session_state.dados[col_to_correct].isin(values_to_remove)
                    
                    st.session_state.dados = st.session_state.dados[~mask]
                    removed_count = initial_count - len(st.session_state.dados)
                    
                    # Registrar a√ß√£o
                    action = {
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'action': f"Removidas {removed_count} linhas com valores espec√≠ficos na coluna {col_to_correct}",
                        'type': "Remo√ß√£o"
                    }
                    st.session_state.actions_log.append(action)
                    st.success(f"Removidas {removed_count} linhas com valores espec√≠ficos!")
        
        elif correction_type == "Substituir Valores":
            st.subheader("Substitui√ß√£o de Valores")
            
            if st.session_state.dados[col_to_correct].dtype == 'object':
                old_value = st.selectbox(
                    "Valor a ser substitu√≠do:", 
                    st.session_state.dados[col_to_correct].unique()
                )
                new_value = st.text_input("Novo valor:")
            else:
                old_value = st.number_input("Valor a ser substitu√≠do:", 
                    value=float(st.session_state.dados[col_to_correct].iloc[0]))
                new_value = st.number_input("Novo valor:")
            
            if st.button("Aplicar Substitui√ß√£o") and str(new_value):
                count = (st.session_state.dados[col_to_correct] == old_value).sum()
                st.session_state.dados[col_to_correct] = st.session_state.dados[col_to_correct].replace(old_value, new_value)
                
                # Registrar a√ß√£o
                action = {
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'action': f"Substitu√≠dos {count} valores '{old_value}' por '{new_value}' na coluna {col_to_correct}",
                    'type': "Substitui√ß√£o"
                }
                st.session_state.actions_log.append(action)
                st.success(f"Substitu√≠dos {count} valores com sucesso!")
        
        elif correction_type == "Preencher Valores Faltantes":
            st.subheader("Preenchimento de Valores Faltantes")
            
            fill_method = st.radio("M√©todo de preenchimento:", [
                "Valor Fixo", 
                "M√©dia/Moda", 
                "Interpola√ß√£o"
            ])
            
            if fill_method == "Valor Fixo":
                if st.session_state.dados[col_to_correct].dtype == 'object':
                    fill_value = st.text_input("Valor para preenchimento:")
                else:
                    fill_value = st.number_input("Valor para preenchimento:")
                
                if st.button("Aplicar Preenchimento") and fill_value is not None:
                    count = st.session_state.dados[col_to_correct].isnull().sum()
                    st.session_state.dados[col_to_correct] = st.session_state.dados[col_to_correct].fillna(fill_value)
                    
                    # Registrar a√ß√£o
                    action = {
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'action': f"Preenchidos {count} valores faltantes com '{fill_value}' na coluna {col_to_correct}",
                        'type': "Preenchimento"
                    }
                    st.session_state.actions_log.append(action)
                    st.success(f"Preenchidos {count} valores faltantes!")
            
            elif fill_method == "M√©dia/Moda":
                if st.button("Aplicar Preenchimento"):
                    count = st.session_state.dados[col_to_correct].isnull().sum()
                    
                    if st.session_state.dados[col_to_correct].dtype == 'object':
                        fill_value = st.session_state.dados[col_to_correct].mode()[0]
                    else:
                        fill_value = st.session_state.dados[col_to_correct].mean()
                    
                    st.session_state.dados[col_to_correct] = st.session_state.dados[col_to_correct].fillna(fill_value)
                    
                    # Registrar a√ß√£o
                    action = {
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'action': f"Preenchidos {count} valores faltantes com {fill_method} ({fill_value:.2f}) na coluna {col_to_correct}",
                        'type': "Preenchimento"
                    }
                    st.session_state.actions_log.append(action)
                    st.success(f"Preenchidos {count} valores faltantes com {fill_method}!")
        
        # Visualiza√ß√£o ap√≥s corre√ß√µes
        st.subheader("Visualiza√ß√£o ap√≥s Corre√ß√µes")
        st.dataframe(st.session_state.dados.head(), use_container_width=True)
    
    with tab3:
        st.header("Resumo das A√ß√µes Realizadas")
        
        if st.session_state.actions_log:
            st.subheader("Hist√≥rico de Modifica√ß√µes")
            actions_df = pd.DataFrame(st.session_state.actions_log)
            st.dataframe(actions_df.sort_values('timestamp', ascending=False), use_container_width=True)
            
            # Estat√≠sticas resumidas
            st.subheader("Estat√≠sticas das A√ß√µes")
            action_counts = actions_df['type'].value_counts()
            st.bar_chart(action_counts)
            
            # Sele√ß√£o de a√ß√µes para manter
            st.subheader("Selecionar A√ß√µes para Manter")
            selected_actions = st.multiselect(
                "Selecione as a√ß√µes que deseja manter no relat√≥rio final:",
                options=actions_df['action'].unique(),
                default=actions_df['action'].unique()
            )
            
            if st.button("Confirmar Sele√ß√£o"):
                st.session_state.selected_actions = selected_actions
                st.success("Sele√ß√£o confirmada! Estas a√ß√µes ser√£o inclu√≠das no relat√≥rio.")
        else:
            st.info("Nenhuma a√ß√£o registrada ainda.")
    
    with tab4:
        st.header("Exportar Dados Limpos")
        
        st.subheader("Dataset Modificado")
        st.dataframe(st.session_state.dados.head(), use_container_width=True)
        
        st.download_button(
            label="üì• Baixar Dataset Limpo como CSV",
            data=convert_df_to_csv(st.session_state.dados),
            file_name='base_de_dados-emprestimo.csv',
            mime='text/csv'
        )
        
        if st.session_state.get('actions_log'):
            st.subheader("Relat√≥rio de A√ß√µes")
            actions_csv = convert_df_to_csv(pd.DataFrame(st.session_state.actions_log))
            
            st.download_button(
                label="üì• Baixar Relat√≥rio de A√ß√µes",
                data=actions_csv,
                file_name='relatorio_acoes.csv',
                mime='text/csv'
            )
    
    # Rodap√©
    st.divider()
    st.caption("üîß Ferramenta de Pr√©-An√°lise de Dados | v1.0")

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import ks_2samp
import io, zipfile, base64

def calcular_iv(dados, coluna, target):
    df = dados[[coluna, target]].dropna()
    if df[coluna].dtype != 'object':
        df['bin'] = pd.cut(df[coluna], bins=10, duplicates='drop')
    else:
        df['bin'] = df[coluna]
    tmp = pd.crosstab(df['bin'], df[target], margins=True)
    if tmp.shape[0] < 2 or 0 not in tmp.columns or 1 not in tmp.columns:
        return np.nan
    tmp.columns = ['n√£o_default', 'default', 'total']
    tmp = tmp[tmp['total'] > 0]
    tmp['%_default'] = np.where(tmp['default'] > 0, tmp['default'] / tmp['default'].sum(), 0.001)
    tmp['%_n√£o_default'] = np.where(tmp['n√£o_default'] > 0, tmp['n√£o_default'] / tmp['n√£o_default'].sum(), 0.001)
    tmp['woe'] = np.log(tmp['%_n√£o_default'] / tmp['%_default'])
    tmp['iv'] = (tmp['%_n√£o_default'] - tmp['%_default']) * tmp['woe']
    return tmp['iv'].sum()

def calcular_ks(dados, coluna, target):
    bons = dados[dados[target] == 0][coluna].dropna()
    maus = dados[dados[target] == 1][coluna].dropna()
    if len(bons) == 0 or len(maus) == 0:
        return np.nan
    ks_stat, _ = ks_2samp(bons, maus)
    return ks_stat

def criar_zip_exportacao(selecionados, dados, target, iv_df, ks_df, woe_tables, corr_matrix, st):
    """Cria um buffer ZIP com os itens selecionados pelo usu√°rio."""
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zip_file:
        # 1. Mapa de calor de correla√ß√£o
        if "Mapa de Correla√ß√£o" in selecionados:
            fig, ax = plt.subplots(figsize=(6, 4))
            sns.heatmap(corr_matrix, annot=False, cmap='coolwarm', center=0, ax=ax)
            ax.set_title("Mapa de Calor de Correla√ß√£o")
            img_data = io.BytesIO()
            fig.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
            plt.close(fig)
            zip_file.writestr("mapa_correlacao.png", img_data.getvalue())

        # 2. Gr√°fico de IV
        if "Gr√°fico de IV" in selecionados and not iv_df.empty:
            fig, ax = plt.subplots(figsize=(6, 0.35 * len(iv_df)))
            bars = ax.barh(iv_df['Vari√°vel'], iv_df['IV'], color='skyblue', edgecolor='darkblue', height=0.7)
            ax.set_title("Information Value (IV)")
            for i, bar in enumerate(bars):
                width = bar.get_width()
                ax.text(width + 0.005, bar.get_y() + bar.get_height()/2, f"{width:.3f}", va='center', fontsize=9)
            img_data = io.BytesIO()
            fig.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
            plt.close(fig)
            zip_file.writestr("iv.png", img_data.getvalue())

        # 3. Gr√°fico de KS
        if "Gr√°fico de KS" in selecionados and not ks_df.empty:
            fig, ax = plt.subplots(figsize=(6, 0.35 * len(ks_df)))
            bars = ax.barh(ks_df['Vari√°vel'], ks_df['KS'], color='lightcoral', edgecolor='darkred', height=0.7)
            ax.set_title("Kolmogorov-Smirnov (KS)")
            for i, bar in enumerate(bars):
                width = bar.get_width()
                ax.text(width + 0.005, bar.get_y() + bar.get_height()/2, f"{width:.3f}", va='center', fontsize=9)
            img_data = io.BytesIO()
            fig.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
            plt.close(fig)
            zip_file.writestr("ks.png", img_data.getvalue())

        # 4. Gr√°ficos de WOE
        if "Gr√°ficos de WOE" in selecionados and woe_tables:
            for var, table in woe_tables.items():
                if 'woe' in table.columns:
                    fig, ax = plt.subplots(figsize=(5, 2))
                    table['woe'].plot(kind='barh', ax=ax, color='teal', edgecolor='black')
                    ax.set_title(f"WOE ‚Äì {var}")
                    img_data = io.BytesIO()
                    fig.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
                    plt.close(fig)
                    zip_file.writestr(f"woe_{var}.png", img_data.getvalue())

        # 5. Tabelas de WOE
        if "Tabelas de WOE" in selecionados and woe_tables:
            for var, table in woe_tables.items():
                if 'erro' not in table.columns:
                    csv_data = table.to_csv(index=True)
                    zip_file.writestr(f"woe_{var}.csv", csv_data)

        # 6. Relat√≥rio de an√°lise
        if "Relat√≥rio de An√°lise" in selecionados:
            top_iv = iv_df.sort_values("IV", ascending=False).head(3)['Vari√°vel'].tolist() if not iv_df.empty else []
            top_ks = ks_df.sort_values("KS", ascending=False).head(3)['Vari√°vel'].tolist() if not ks_df.empty else []
            relatorio = f"""
                        Relat√≥rio de Pr√©-Sele√ß√£o de Vari√°veis
                        =====================================
                        Vari√°vel-alvo: {target}
                        
                        Resumo:
                        - Total de vari√°veis ativas: {len(iv_df)}
                        - Top 3 por IV: {', '.join(top_iv) if top_iv else 'N/A'}
                        - Top 3 por KS: {', '.join(top_ks) if top_ks else 'N/A'}
                        
                        Data: {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}
                                    """.strip()
            zip_file.writestr("relatorio_analise.txt", relatorio)

    zip_buffer.seek(0)
    return zip_buffer
    
def main():
    st.title("üìà An√°lise Bivariada e Pr√©-Sele√ß√£o de Vari√°veis")
    st.markdown("""
    Defina a vari√°vel-alvo, corrija seu formato, e realize an√°lises preditivas:  
    **IV, WOE, KS** ‚Äì tudo em um s√≥ lugar.
    """)
    
    if 'dados' not in st.session_state:
        st.warning("Dados n√£o carregados! Acesse a p√°gina de Coleta primeiro.")
        st.page_link("pages/3_üöÄ_Coleta_de_Dados.py", label="‚Üí Ir para Coleta")
        return

    dados = st.session_state.dados.copy()

    # --- 1. SELE√á√ÉO E VALIDA√á√ÉO DA VARI√ÅVEL-ALVO (Y) ---
    st.markdown("### üîç Defina a Vari√°vel-Alvo (Default)")
    target = st.selectbox(
        "Selecione a coluna que indica **inadimpl√™ncia**:",
        options=dados.columns,
        index=None,
        placeholder="Escolha a vari√°vel de default",
        key="target_select"  # ‚Üê mant√©m estado
    )
    
    if target not in dados.columns:
        st.error("ALERTA: vari√°vel-alvo inv√°lida ou indefinida.")
        return
    
    y_data = dados[target].dropna()
    if len(y_data) == 0:
        st.error(f"A coluna `{target}` est√° vazia.")
        return
    
    valores_unicos = pd.Series(y_data.unique()).dropna().tolist()
    try:
        # Tenta ordenar apenas valores num√©ricos
        valores_numericos = [x for x in valores_unicos if isinstance(x, (int, float))]
        valores_unicos = sorted(valores_numericos) if valores_numericos else valores_unicos
    except:
        pass
    
    # Verificar se √© bin√°ria (0/1)
    if set(valores_unicos) != {0, 1}:
        st.warning(f"""
        ‚ö†Ô∏è A vari√°vel `{target}` n√£o est√° no formato 0/1.  
        Valores encontrados: {valores_unicos}
        """)
    
        st.markdown("#### üîß Mapeie os valores para 0 (adimplente) e 1 (inadimplente)")
        col1, col2 = st.columns(2)
    
        with col1:
            valor_bom = st.selectbox(
                "Valor que representa **adimplente (0)**",
                options=valores_unicos,
                key="valor_bom_select"  # ‚Üê estado persistente
            )
    
        with col2:
            # Remove o valor escolhido como "bom" das op√ß√µes para "mau"
            opcoes_maus = [v for v in valores_unicos if v != valor_bom]
            valor_mau = st.selectbox(
                "Valor que representa **inadimplente (1)**",
                options=opcoes_maus,
                key="valor_mau_select"  # ‚Üê estado persistente
            )
    
        # Bot√£o para aplicar o mapeamento
        if st.button("‚úÖ Aplicar Mapeamento", key="btn_aplicar_mapeamento"):
            if valor_bom == valor_mau:
                st.error("Erro: os valores para 'bom' e 'mau' devem ser diferentes.")
            else:
                try:
                    # Mapeia os valores
                    y_mapped = dados[target].map({valor_bom: 0, valor_mau: 1})
                    
                    # Verifica se houve falha no mapeamento (valores n√£o mapeados)
                    if y_mapped.isnull().any():
                        st.error(f"Erro: alguns valores n√£o foram mapeados corretamente. Verifique os dados.")
                    else:
                        # Atualiza os dados
                        dados_atualizados = dados.copy()
                        dados_atualizados[target] = y_mapped
                        st.session_state.dados = dados_atualizados
                        st.session_state.target = target
                        st.success(f"‚úÖ `{target}` foi convertida para 0 (adimplente) e 1 (inadimplente).")
                        st.rerun()  # ‚Üê recarrega para refletir a mudan√ßa
                except Exception as e:
                    st.error(f"Erro ao aplicar mapeamento: {e}")
    
    else:
        st.success(f"‚úÖ `{target}` j√° est√° no formato 0/1.")
        st.session_state.target = target
    
    # --- DEFINI√á√ÉO INICIAL DE VARI√ÅVEIS ATIVAS ---
    if 'variaveis_ativas' not in st.session_state:
        st.session_state.variaveis_ativas = [col for col in dados.columns if col != target]

    variaveis_ativas = st.session_state.variaveis_ativas
    numericas = dados[variaveis_ativas].select_dtypes(include=[np.number]).columns.tolist()
    categoricas = dados[variaveis_ativas].select_dtypes(include='object').columns.tolist()
    features = [c for c in (numericas + categoricas) if c != target]

    # --- 2. AN√ÅLISE BIVARIADA ---
    st.markdown("### üìä An√°lise Bivariada")
    col1, col2 = st.columns(2)
    with col1:
        var_x = st.selectbox("Vari√°vel X:", features, key="x_biv")
    with col2:
        var_y = st.selectbox("Vari√°vel Y:", features, key="y_biv")

    tipo_grafico = st.radio("Tipo de gr√°fico:", ["Dispers√£o", "Boxplot", "Barras"], horizontal=True)

    fig, ax = plt.subplots(figsize=(7, 4.5))
    try:
        if tipo_grafico == "Dispers√£o":
            sns.scatterplot(data=dados, x=var_x, y=var_y, hue=target, palette="Set1", ax=ax)
            ax.set_title(f"{var_x} vs {var_y} por {target}")
        elif tipo_grafico == "Boxplot":
            sns.boxplot(data=dados, x=var_x, y=var_y, ax=ax)
            ax.set_title(f"Distribui√ß√£o de {var_y} por {var_x}")
        else:
            agg = dados.groupby(var_x)[var_y].mean().reset_index()
            sns.barplot(data=agg, x=var_x, y=var_y, ax=ax)
            ax.set_title(f"M√©dia de {var_y} por {var_x}")
        plt.xticks(rotation=45)
        st.pyplot(fig)
    except:
        st.error("N√£o foi poss√≠vel gerar o gr√°fico com essas vari√°veis.")

    if pd.api.types.is_numeric_dtype(dados[var_x]) and pd.api.types.is_numeric_dtype(dados[var_y]):
        corr = dados[[var_x, var_y]].corr().iloc[0, 1]
        st.metric("Correla√ß√£o", f"{corr:.3f}")

    # --- CORRELA√á√ÉO: REMO√á√ÉO ANTES DAS OUTRAS AN√ÅLISES ---
    with st.expander("üß© An√°lise de Correla√ß√£o e Remo√ß√£o", expanded=False):
        st.markdown("#### Evite multicolinearidade")
        st.info("Alta correla√ß√£o entre vari√°veis pode prejudicar o modelo. Escolha como deseja remover vari√°veis redundantes.")
    
        corr_threshold = st.slider(
            "Limite de correla√ß√£o para detec√ß√£o:",
            0.1, 0.95, 0.7, 0.05,
            key="corr_slider_bivariada"
        )
    
        if len(numericas) > 1:
            corr_matrix = dados[numericas].corr().abs()
            upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))
            high_corr_pairs = [(i, j) for i in upper.columns for j in upper.columns if upper.loc[i, j] > corr_threshold]
    
            if not high_corr_pairs:
                st.success("‚úÖ Nenhuma correla√ß√£o acima do limite encontrada.")
            else:
                st.warning(f"‚ö†Ô∏è {len(high_corr_pairs)} pares com correla√ß√£o > {corr_threshold}")
    
                # Exibir pares
                corr_list = "\n".join([f"- `{i}` vs `{j}`: {upper.loc[i, j]:.2f}" for i, j in high_corr_pairs[:10]])
                st.markdown(f"**Pares com alta correla√ß√£o:**\n{corr_list}")

                fig_corr, ax_corr = plt.subplots(figsize=(6, 4))
                sns.heatmap(corr_matrix, annot=False, cmap='coolwarm', center=0, ax=ax_corr)
                ax_corr.set_title("Mapa de Calor de Correla√ß√£o")
                st.pyplot(fig_corr)
                
                # Extrair todas as vari√°veis envolvidas em pares de alta correla√ß√£o
                vars_envolvidas = list(set([i for i, j in high_corr_pairs] + [j for i, j in high_corr_pairs]))
                vars_envolvidas = [v for v in vars_envolvidas if v in st.session_state.variaveis_ativas]
    
                if not vars_envolvidas:
                    st.info("Nenhuma vari√°vel dispon√≠vel para remo√ß√£o.")
                else:
                    st.markdown("##### üßæ Selecione quais vari√°veis deseja remover (pode escolher qualquer uma dos pares acima):")
                    vars_para_remover = st.multiselect(
                        "Vari√°veis a remover",
                        options=sorted(vars_envolvidas),
                        default=[],
                        key="multiselect_vars_correlacao"
                    )
    
                    if st.button("‚úÖ Aplicar Remo√ß√£o"):
                        if vars_para_remover:
                            # Remove as selecionadas da lista ativa
                            st.session_state.variaveis_ativas = [
                                v for v in st.session_state.variaveis_ativas if v not in vars_para_remover
                            ]
                            st.success(f"‚úÖ Vari√°veis removidas: `{vars_para_remover}`")
                            st.rerun()
                        else:
                            st.info("Nenhuma vari√°vel selecionada para remo√ß√£o.")
    
    # --- ATUALIZAR LISTAS AP√ìS REMO√á√ÉO ---
    # Isso √© essencial: recarregar as listas com base na vers√£o atualizada de variaveis_ativas
    variaveis_ativas = st.session_state.variaveis_ativas
    numericas = dados[variaveis_ativas].select_dtypes(include=[np.number]).columns.tolist()
    categoricas = dados[variaveis_ativas].select_dtypes(include='object').columns.tolist()
    features = [c for c in (numericas + categoricas) if c != target]


    # --- PR√â-SELE√á√ÉO DE VARI√ÅVEIS (com IV, WOE, KS usando apenas vari√°veis ativas) ---
    with st.expander("üîß Pr√©-sele√ß√£o de Vari√°veis", expanded=False):
        st.markdown("### Etapas com base nas vari√°veis **ativas** (ap√≥s remo√ß√£o por correla√ß√£o)")

        # --- IV ---
        st.markdown("#### üìà Information Value (IV)")
        st.info("IV > 0.1: √∫til | > 0.3: forte | > 0.5: suspeito (vazamento).")

        iv_data = []
        for col in features:
            try:
                iv = calcular_iv(dados, col, target)
                iv_data.append({'Vari√°vel': col, 'IV': iv})
            except:
                iv_data.append({'Vari√°vel': col, 'IV': np.nan})

        iv_df = pd.DataFrame(iv_data).dropna().sort_values("IV", ascending=True)
        st.session_state.iv_df = iv_df

        if not iv_df.empty:
            fig_iv, ax_iv = plt.subplots(figsize=(6, 0.35 * len(iv_df)))
            bars = ax_iv.barh(iv_df['Vari√°vel'], iv_df['IV'], color='skyblue', edgecolor='darkblue', height=0.7)
            ax_iv.set_title("Information Value (IV) por Vari√°vel")
            for i, bar in enumerate(bars):
                width = bar.get_width()
                ax_iv.text(width + 0.005, bar.get_y() + bar.get_height()/2, f"{width:.3f}", va='center', fontsize=9)
            st.pyplot(fig_iv)
        else:
            st.warning("N√£o foi poss√≠vel calcular IV para nenhuma vari√°vel.")

        # --- WOE
        st.markdown("#### üîé Weight of Evidence (WOE)")
        st.info("WOE transforma vari√°veis num√©ricas em escores de risco. Ajuste o n√∫mero de faixas.")

        st.warning("""
        Edite os valores de **m√≠nimo e m√°ximo** ou os **limites das faixas** para ajustar o tamanho do intervalo de cada classe.  
        Obs: A tabela e o gr√°fico s√£o atualizados automaticamente.
        """)
        
        # Inicializa o estado para configura√ß√µes de WOE
        if 'woe_config' not in st.session_state:
            st.session_state.woe_config = {}
        
        # Vari√°veis num√©ricas ativas
        numericas_ativas = [col for col in numericas if col != target]
        if not numericas_ativas:
            st.warning("Nenhuma vari√°vel num√©rica dispon√≠vel para WOE.")
        else:
            var_selecionada = st.selectbox(
                "Selecione a vari√°vel para an√°lise de WOE:",
                options=numericas_ativas,
                key="woe_var_select"
            )
        
            if var_selecionada:
                dados_var = dados[var_selecionada].dropna()
                dados_clean = dados_var[(dados_var.notna()) & (np.isfinite(dados_var))]
        
                min_val_orig = float(dados_clean.min())
                max_val_orig = float(dados_clean.max())
        
                # Inicializa configura√ß√£o da vari√°vel
                if var_selecionada not in st.session_state.woe_config:
                    st.session_state.woe_config[var_selecionada] = {
                        'min_val': min_val_orig,
                        'max_val': max_val_orig,
                        'n_bins': 10
                    }
        
                config = st.session_state.woe_config[var_selecionada]
        
                col1, col2, col3 = st.columns(3)
                with col1:
                    new_min = st.number_input(
                        "Limite inferior",
                        min_value=-1e10,
                        max_value=max_val_orig,
                        value=config['min_val'],
                        step=0.01,
                        key=f"min_{var_selecionada}"
                    )
                with col2:
                    new_max = st.number_input(
                        "Limite superior",
                        min_value=min_val_orig,
                        max_value=1e10,
                        value=config['max_val'],
                        step=0.01,
                        key=f"max_{var_selecionada}"
                    )
                with col3:
                    n_bins = st.number_input(
                        "N√∫mero de faixas (bins)",
                        min_value=2,
                        max_value=20,
                        value=config['n_bins'],
                        step=1,
                        key=f"bins_{var_selecionada}"
                    )
        
                # Atualiza configura√ß√£o se houver mudan√ßa
                if (new_min != config['min_val'] or 
                    new_max != config['max_val'] or 
                    n_bins != config['n_bins']):
                    st.session_state.woe_config[var_selecionada] = {
                        'min_val': new_min,
                        'max_val': new_max,
                        'n_bins': n_bins
                    }
                    st.rerun()  # Atualiza para refletir mudan√ßas
        
                # Aplica os limites
                config = st.session_state.woe_config[var_selecionada]
                min_val = config['min_val']
                max_val = config['max_val']
                n_bins = config['n_bins']
        
                # Cria bins com os limites ajustados
                bins = np.linspace(min_val, max_val, n_bins + 1)
        
                # Exibe os limites atuais
        #        st.markdown(f"**Faixas atuais:**")
        #        faixas = []
        #        for i in range(n_bins):
        #            faixas.append(f"`[{bins[i]:.2f}, {bins[i+1]:.2f})`")
        #        st.write(" ‚Üí ".join(faixas))

                try:
                    df_temp = dados[[var_selecionada, target]].dropna()
                    # Filtra apenas dentro dos limites definidos
                    mask = (df_temp[var_selecionada] >= min_val) & (df_temp[var_selecionada] <= max_val)
                    df_temp = df_temp[mask]
                
                    # Aplica os bins
                    df_temp['bin_interval'] = pd.cut(df_temp[var_selecionada], bins=bins, include_lowest=True, right=False, duplicates='drop')
                
                    # Cria r√≥tulos formatados para exibi√ß√£o
                    bin_labels = []
                    for i in range(len(bins) - 1):
                        left = f"{bins[i]:.2f}"
                        right = f"{bins[i+1]:.2f}"
                        bin_labels.append(f"[{left}, {right})")
                    
                    # Mapeia o intervalo para o r√≥tulo formatado
                    bin_to_label = {interval: label for interval, label in zip(pd.IntervalIndex.from_breaks(bins, closed='left'), bin_labels)}
                    df_temp['Classe'] = df_temp['bin_interval'].map(bin_to_label)
                
                    # Garante que a coluna 'bin' esteja ordenada corretamente
                    df_temp['Classe'] = pd.Categorical(df_temp['Classe'], categories=bin_labels, ordered=True)
                
                    # Cria a tabela de contagem
                    tmp = pd.crosstab(df_temp['Classe'], df_temp[target])
                    tmp.columns = ['n√£o_default', 'default']
                
                    total_bons = tmp['n√£o_default'].sum()
                    total_maus = tmp['default'].sum()
                
                    tmp['%_n√£o_default'] = tmp['n√£o_default'] / (total_bons or 1)
                    tmp['%_default'] = tmp['default'] / (total_maus or 1)
                
                    # Evitar divis√£o por zero
                    tmp['%_default'] = tmp['%_default'].replace(0, 1e-6)
                    tmp['%_n√£o_default'] = tmp['%_n√£o_default'].replace(0, 1e-6)
                
                    tmp['woe'] = np.log(tmp['%_n√£o_default'] / tmp['%_default'])
                
                    woe_tables = {}
                    # Armazena tabela
                    if 'woe_tables' not in st.session_state:
                        st.session_state.woe_tables = {}
                    st.session_state.woe_tables[var_selecionada] = tmp.copy()
                
                    # Exibe tabela formatada
                    st.markdown("##### üìä Tabela de WOE")
                
                    # Formata√ß√£o visual
                    st.dataframe(
                        tmp.style.format({
                            'n√£o_default': '{:,.0f}',
                            'default': '{:,.0f}',
                            '%_n√£o_default': '{:.4f}',
                            '%_default': '{:.4f}',
                            'woe': '{:.3f}'
                        }).background_gradient(cmap='RdYlGn', subset=['woe'], low=1, high=1)
                    )
                
                    # Gr√°fico
                    fig, ax = plt.subplots(figsize=(6, 2.5))
                    tmp['woe'].plot(kind='barh', ax=ax, color='teal', edgecolor='black')
                    ax.set_title(f"WOE por Faixa - {var_selecionada}", fontsize=10)
                    ax.set_xlabel("Weight of Evidence", fontsize=9)
                    ax.tick_params(axis='both', which='major', labelsize=8)
                    plt.tight_layout()
                    st.pyplot(fig)
            
                except Exception as e:
                    st.error(f"Erro ao calcular WOE: {e}")
        
            # Armazenar para uso futuro
            st.session_state.woe_tables = woe_tables  
    
        # --- KS ---
        st.markdown("#### üìä Kolmogorov-Smirnov (KS)")
        st.info("KS > 0.3: bom | > 0.4: excelente. Mede a separa√ß√£o entre bons e maus.")

        ks_data = []
        for col in numericas:
            if col == target:
                continue
            try:
                ks = calcular_ks(dados, col, target)
                ks_data.append({'Vari√°vel': col, 'KS': ks})
            except:
                ks_data.append({'Vari√°vel': col, 'KS': np.nan})

        ks_df = pd.DataFrame(ks_data).dropna().sort_values("KS", ascending=True)
        st.session_state.ks_df = ks_df

        if not ks_df.empty:
            fig_ks, ax_ks = plt.subplots(figsize=(6, 0.35 * len(ks_df)))
            bars = ax_ks.barh(ks_df['Vari√°vel'], ks_df['KS'], color='lightcoral', edgecolor='darkred', height=0.7)
            ax_ks.set_title("KS por Vari√°vel")
            for i, bar in enumerate(bars):
                width = bar.get_width()
                ax_ks.text(width + 0.005, bar.get_y() + bar.get_height()/2, f"{width:.3f}", va='center', fontsize=9)
            st.pyplot(fig_ks)
        else:
            st.warning("N√£o foi poss√≠vel calcular KS.")

    # --- TRANSFORMA√á√ÉO DE VARI√ÅVEIS CATEG√ìRICAS ---
    with st.expander("üîÑ Transforma√ß√£o de Vari√°veis Categ√≥ricas", expanded=False):
        st.markdown("### üß† Por que transformar vari√°veis categ√≥ricas?")
        st.info("""
        Vari√°veis categ√≥ricas com muitas classes ou com baixo poder preditivo (IV < 0.1) podem:
        - Aumentar a complexidade do modelo.
        - Gerar overfitting.
        - Ter classes com pouca popula√ß√£o (ru√≠do).
        
        **Solu√ß√µes:**
        - üîó **Fus√£o de classes**: agrupar categorias semelhantes ou com baixa frequ√™ncia.
        - ‚ûï **Vari√°veis dummy**: converter categorias em indicadores bin√°rios (√∫til para modelos lineares).
        """)

        st.info("""ALERTA! Esses procedimentos ainda n√£o est√£o devidamente implementados para a fase seguinte. 
                  Assim, est√° presente aqui para suscitar a curiosidade e a possibilidade de serem realizados. 
                  """)

        # Recupera vari√°veis categ√≥ricas ativas
        if 'variaveis_ativas' not in st.session_state:
            st.warning("Nenhuma vari√°vel ativa definida. Volte para a an√°lise de correla√ß√£o.")
            st.stop()
    
        variaveis_ativas = st.session_state.variaveis_ativas
        categoricas = [col for col in variaveis_ativas if col != target]# and dados[col].dtype == 'object']
    
        if not categoricas:
            st.info("Nenhuma vari√°vel categ√≥rica dispon√≠vel para transforma√ß√£o.")
        else:
            # Calcula IV para categ√≥ricas
            iv_data = []
            for col in categoricas:
                try:
                    iv = calcular_iv(dados, col, target)
                    iv_data.append({'Vari√°vel': col, 'IV': iv})
                except:
                    iv_data.append({'Vari√°vel': col, 'IV': np.nan})
            iv_df_cat = pd.DataFrame(iv_data).dropna().sort_values("IV", ascending=True)
    
            # Mostra vari√°veis com baixo IV
            baixo_iv = iv_df_cat[iv_df_cat['IV'] < 0.1]
            if not baixo_iv.empty:
                st.warning(f"‚ö†Ô∏è {len(baixo_iv)} vari√°vel(s) com IV < 0.1 (baixo poder preditivo):")
                st.dataframe(baixo_iv.style.format({"IV": "{:.3f}"}).background_gradient(cmap="Oranges", subset=["IV"]))
            else:
                st.success("‚úÖ Todas as vari√°veis categ√≥ricas t√™m IV ‚â• 0.1.")
    
            # Sele√ß√£o da vari√°vel para transforma√ß√£o
            var_cat = st.selectbox(
                "Selecione uma vari√°vel categ√≥rica para transformar:",
                options=categoricas,
                key="var_cat_select"
            )
    
            if var_cat:
                serie = dados[var_cat].value_counts().reset_index()
                serie.columns = [var_cat, 'Frequ√™ncia']
                serie['%'] = (serie['Frequ√™ncia'] / serie['Frequ√™ncia'].sum() * 100).round(2)
                st.dataframe(serie)
    
                tab1, tab2 = st.tabs(["üîó Fus√£o de Classes", "‚ûï Criar Dummies"])
    
                with tab1:
                    st.markdown("#### üîó Reagrupe classes com crit√©rio (ex: 'outros', agrupar por risco)")
                    classes = dados[var_cat].dropna().unique().tolist()
                    st.caption("Selecione as classes que deseja **agrupar em uma nova categoria**.")
    
                    col1, col2 = st.columns(2)
                    with col1:
                        selecao = st.multiselect(
                            "Classes para agrupar:",
                            options=classes,
                            key=f"merge_select_{var_cat}"
                        )
                    with col2:
                        novo_nome = st.text_input(
                            "Nome da nova categoria:",
                            value="Outros",
                            key=f"novo_nome_{var_cat}"
                        )
    
                    if st.button("‚úÖ Aplicar Fus√£o", key=f"btn_merge_{var_cat}"):
                        if len(selecao) < 2:
                            st.warning("Selecione pelo menos duas classes para fundir.")
                        else:
                            # Cria c√≥pia dos dados
                            dados_transformado = dados.copy()
                            dados_transformado[var_cat] = dados_transformado[var_cat].astype('object')
                            dados_transformado[var_cat] = dados_transformado[var_cat].replace(selecao, novo_nome)
    
                            # Recalcula WOE e IV
                            try:
                                df_temp = dados_transformado[[var_cat, target]].dropna()
                                tmp = pd.crosstab(df_temp[var_cat], df_temp[target])
                                tmp.columns = ['n√£o_default', 'default']
                                tmp['%_n√£o_default'] = tmp['n√£o_default'] / tmp['n√£o_default'].sum()
                                tmp['%_default'] = tmp['default'] / tmp['default'].sum()
                                tmp['%_default'] = tmp['%_default'].replace(0, 1e-6)
                                tmp['%_n√£o_default'] = tmp['%_n√£o_default'].replace(0, 1e-6)
                                tmp['woe'] = np.log(tmp['%_n√£o_default'] / tmp['%_default'])
                                iv_novo = ((tmp['%_n√£o_default'] - tmp['%_default']) * tmp['woe']).sum()
    
                                st.success(f"‚úÖ Fus√£o aplicada! Novo IV: {iv_novo:.3f}")
    
                                # Mostra tabela
                                st.dataframe(
                                    tmp[['n√£o_default', 'default', '%_n√£o_default', '%_default', 'woe']].style.format({
                                        '%_n√£o_default': '{:.4f}',
                                        '%_default': '{:.4f}',
                                        'woe': '{:.3f}'
                                    }).background_gradient(cmap='RdYlGn', subset=['woe'])
                                )
    
                                # Pergunta ao usu√°rio se deseja salvar
                                st.markdown("### üíæ Deseja incluir esta vari√°vel transformada no banco de dados?")
                                incluir = st.radio(
                                    "Incluir no conjunto de dados?",
                                    options=["N√£o", "Sim"],
                                    key=f"incluir_merge_{var_cat}"
                                )
                                if incluir == "Sim":
                                    nome_nova = st.text_input(
                                        "Como deseja identificar essa nova vari√°vel?",
                                        value=f"{var_cat}_agrupado",
                                        key=f"nome_merge_{var_cat}"
                                    )
                                    if st.button("üíæ Salvar Vari√°vel Transformada", key=f"save_merge_{var_cat}"):
                                        if nome_nova in dados.columns:
                                            st.warning(f"J√° existe uma coluna chamada `{nome_nova}`. Escolha outro nome.")
                                        else:
                                            # Salva a nova coluna
                                            if 'dados_transformados' not in st.session_state:
                                                st.session_state.dados_transformados = dados.copy()
                                            st.session_state.dados_transformados[nome_nova] = dados_transformado[var_cat]
                                            st.success(f"‚úÖ Vari√°vel `{nome_nova}` salva com sucesso!")
                                            st.session_state.get('variaveis_ativas', []).append(nome_nova)  # Opcional: adiciona √† lista ativa
    
                            except Exception as e:
                                st.error(f"Erro ao calcular novo WOE/IV: {e}")
    
                with tab2:
                    st.markdown("#### ‚ûï Criar Vari√°veis Dummy (One-Hot Encoding)")
                    st.info("Cria uma coluna bin√°ria para cada categoria (√∫til para modelos lineares).")
    
                    if st.button("‚úÖ Gerar Dummies", key=f"btn_dummy_{var_cat}"):
                        try:
                            dummies = pd.get_dummies(dados[var_cat], prefix=var_cat)
                            st.success(f"‚úÖ Criadas {dummies.shape[1]} vari√°veis dummy a partir de `{var_cat}`")
                            st.dataframe(dummies.head())
    
                            # Pergunta ao usu√°rio se deseja salvar
                            st.markdown("### üíæ Deseja incluir essas vari√°veis dummy no banco de dados?")
                            incluir = st.radio(
                                "Incluir dummies no conjunto de dados?",
                                options=["N√£o", "Sim"],
                                key=f"incluir_dummy_{var_cat}"
                            )
                            if incluir == "Sim":
                                prefixo = st.text_input(
                                    "Prefixo para identificar as vari√°veis dummy:",
                                    value=var_cat,
                                    key=f"prefixo_dummy_{var_cat}"
                                )
                                if st.button("üíæ Salvar Vari√°veis Dummy", key=f"save_dummy_{var_cat}"):
                                    dados_com_dummies = dados.copy()
                                    dummies_renomeadas = dummies.add_prefix(f"{prefixo}_")
                                    colisoes = [col for col in dummies_renomeadas.columns if col in dados_com_dummies.columns]
                                    if colisoes:
                                        st.warning(f"Conflito de nomes: {colisoes}. Remova ou renomeie primeiro.")
                                    else:
                                        # Salva no session_state
                                        if 'dados_transformados' not in st.session_state:
                                            st.session_state.dados_transformados = dados.copy()
                                        st.session_state.dados_transformados = pd.concat([
                                            st.session_state.dados_transformados, dummies_renomeadas
                                        ], axis=1)
                                        st.session_state.get('variaveis_ativas', []).extend(dummies_renomeadas.columns.tolist())
                                        st.success(f"‚úÖ {len(dummies_renomeadas.columns)} vari√°veis dummy salvas com o prefixo `{prefixo}_`")
    
                        except Exception as e:
                            st.error(f"Erro ao gerar dummies: {e}")

    # --- RELAT√ìRIO ---
    with st.expander("üìã Relat√≥rio de An√°lise"):
        st.markdown("### ‚úÖ Vari√°veis Ativas Ap√≥s Pr√©-Sele√ß√£o")
        st.write(f"- **Vari√°vel-alvo:** `{target}`")
        st.write(f"- **Vari√°veis ativas:** {len(variaveis_ativas)}")
        st.write(f"- **Num√©ricas:** {len(numericas)} | **Categ√≥ricas:** {len(categoricas)}")
        
        if 'iv_df' in st.session_state and not st.session_state.iv_df.empty:
            top_iv = st.session_state.iv_df.sort_values("IV", ascending=False).head(3)['Vari√°vel'].tolist()
            st.write(f"- **Top 3 por IV:** {', '.join(top_iv)}")
        else:
            st.write("- **Top 3 por IV:** N/A")
    
        if 'ks_df' in st.session_state and not st.session_state.ks_df.empty:
            top_ks = st.session_state.ks_df.sort_values("KS", ascending=False).head(3)['Vari√°vel'].tolist()
            st.write(f"- **Top 3 por KS:** {', '.join(top_ks)}")
        else:
            st.write("- **Top 3 por KS:** N/A")


    # --- EXPORTA√á√ÉO PERSONALIZADA ---
    st.markdown("---")
    with st.expander("üíæ Exportar Outputs", expanded=False):
        st.markdown("### üì• Escolha o que deseja incluir no relat√≥rio")
    
        # Op√ß√µes de sele√ß√£o
        incluir_graficos = st.checkbox("‚úÖ Incluir gr√°ficos (IV, KS, WOE)")
        incluir_tabelas = st.checkbox("‚úÖ Incluir tabelas de WOE")
        incluir_relatorio = st.checkbox("‚úÖ Incluir relat√≥rio de an√°lise (txt)")
    
        if st.button("üì¶ Gerar Relat√≥rio ZIP"):
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zip_file:
                # 1. Incluir gr√°ficos
                if incluir_graficos:
                    # Gr√°fico de IV
                    if 'iv_df' in st.session_state and not st.session_state.iv_df.empty:
                        fig_iv, ax_iv = plt.subplots(figsize=(6, 0.35 * len(st.session_state.iv_df)))
                        iv_df = st.session_state.iv_df.sort_values("IV", ascending=True)
                        bars = ax_iv.barh(iv_df['Vari√°vel'], iv_df['IV'], color='skyblue', edgecolor='darkblue')
                        ax_iv.set_title("Information Value (IV)")
                        for i, bar in enumerate(bars):
                            width = bar.get_width()
                            ax_iv.text(width + 0.005, bar.get_y() + bar.get_height()/2, f"{width:.3f}", va='center', fontsize=9)
                        img_data = io.BytesIO()
                        fig_iv.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
                        plt.close(fig_iv)
                        zip_file.writestr("grafico_iv.png", img_data.getvalue())
    
                    # Gr√°fico de KS
                    if 'ks_df' in st.session_state and not st.session_state.ks_df.empty:
                        fig_ks, ax_ks = plt.subplots(figsize=(6, 0.35 * len(st.session_state.ks_df)))
                        ks_df = st.session_state.ks_df.sort_values("KS", ascending=True)
                        bars = ax_ks.barh(ks_df['Vari√°vel'], ks_df['KS'], color='lightcoral', edgecolor='darkred')
                        ax_ks.set_title("Kolmogorov-Smirnov (KS)")
                        for i, bar in enumerate(bars):
                            width = bar.get_width()
                            ax_ks.text(width + 0.005, bar.get_y() + bar.get_height()/2, f"{width:.3f}", va='center', fontsize=9)
                        img_data = io.BytesIO()
                        fig_ks.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
                        plt.close(fig_ks)
                        zip_file.writestr("grafico_ks.png", img_data.getvalue())
    
                    # Gr√°ficos de WOE
                    if 'woe_tables' in st.session_state:
                        for var, table in st.session_state.woe_tables.items():
                            if 'woe' in table.columns:
                                fig, ax = plt.subplots(figsize=(6, 3))
                                table['woe'].plot(kind='barh', ax=ax, color='teal', edgecolor='black')
                                ax.set_title(f"WOE - {var}")
                                img_data = io.BytesIO()
                                fig.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
                                plt.close(fig)
                                zip_file.writestr(f"woe_{var}.png", img_data.getvalue())
    
                # 2. Incluir tabelas de WOE
                if incluir_tabelas and 'woe_tables' in st.session_state:
                    for var, table in st.session_state.woe_tables.items():
                        if 'erro' not in table.columns:
                            csv_data = table.to_csv(index=True)
                            zip_file.writestr(f"woe_{var}.csv", csv_data)
    
                # 3. Incluir relat√≥rio de an√°lise
                if incluir_relatorio:
                    # Recuperar top IV e KS
                    top_iv = []
                    if 'iv_df' in st.session_state and not st.session_state.iv_df.empty:
                        top_iv = st.session_state.iv_df.sort_values("IV", ascending=False).head(3)['Vari√°vel'].tolist()
    
                    top_ks = []
                    if 'ks_df' in st.session_state and not st.session_state.ks_df.empty:
                        top_ks = st.session_state.ks_df.sort_values("KS", ascending=False).head(3)['Vari√°vel'].tolist()

    
                    relatorio_txt = f"""
                            Relat√≥rio de An√°lise Bivariada
                            ==============================
                            Vari√°vel-alvo: {target}
                            
                            Resumo:
                            - Total de vari√°veis ativas: {len(st.session_state.variaveis_ativas)}
                            - Top 3 por IV: {', '.join(top_iv) if top_iv else 'N/A'}
                            - Top 3 por KS: {', '.join(top_ks) if top_ks else 'N/A'}
                            
                            Data: {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}
                                            """.strip()
                    zip_file.writestr("relatorio_analise.txt", relatorio_txt)
    
            # Finaliza o buffer e cria o link de download
            zip_buffer.seek(0)
            b64 = base64.b64encode(zip_buffer.getvalue()).decode()
            href = f'<a href="data:application/zip;base64,{b64}" download="relatorio_analise_bivariada.zip">üì• Baixar Relat√≥rio ZIP</a>'
            st.markdown(href, unsafe_allow_html=True)
            st.success("‚úÖ Relat√≥rio personalizado gerado com sucesso!")
    
        
    # --- NAVEGA√á√ÉO ---
    st.markdown("---")
    st.page_link("pages/6_ü§ñ_Modelagem.py", label="‚û°Ô∏è Ir para Modelagem", icon="ü§ñ")

if __name__ == "__main__":
    main()

import streamlit as st
import pandas as pd
import io
import zipfile
import base64
from datetime import datetime
import json

def main():
    st.title("üìë Relat√≥rio Final de Credit Scoring")
    st.markdown("""
    Gere um **relat√≥rio completo e personalizado** para apresentar √† √°rea de risco.  
    Combine insights de todas as etapas do projeto.
    """)

    if 'dados' not in st.session_state:
        st.warning("Dados n√£o dispon√≠veis. Complete as etapas anteriores.")
        st.page_link("pages/3_üöÄ_Coleta_de_Dados.py", label="‚Üí Ir para Coleta de Dados")
        return

    # --- 1. CONFIGURA√á√ïES DO RELAT√ìRIO ---
    st.subheader("üìù Configura√ß√µes do Relat√≥rio")

    col1, col2 = st.columns(2)
    with col1:
        nome_projeto = st.text_input("Nome do Projeto:", "An√°lise de Risco de Cr√©dito")
        autor = st.text_input("Autor / Equipe:", st.session_state.get("user_id", "Equipe de Risco"))

    with col2:
        data_relatorio = datetime.now().strftime("%d/%m/%Y %H:%M")
        st.info(f"Data de gera√ß√£o: {data_relatorio}")

    # --- 2. SELE√á√ÉO DE SE√á√ïES ---
    st.subheader("üîç Selecione as se√ß√µes e detalhes a incluir")

    # Estrutura de sele√ß√£o por p√°gina
    secoes = {
        "1. Coleta de Dados": {
            "Descri√ß√£o da fonte dos dados": True,
            "Tratamento de dados faltantes": True,
            "Estat√≠sticas da amostra": True
        },
        "2. An√°lise Univariada": {
            "Distribui√ß√£o de vari√°veis num√©ricas": True,
            "Frequ√™ncia de vari√°veis categ√≥ricas": True,
            "Identifica√ß√£o de outliers e nulos": True
        },
        "3. An√°lise Bivariada": {
            "Top vari√°veis por IV (Information Value)": True,
            "Top vari√°veis por KS (Kolmogorov-Smirnov)": True,
            "Mapa de calor de correla√ß√£o": True,
            "Tabelas e gr√°ficos de WOE": True
        },
        "4. Modelagem": {
            "Tipo de modelo (Regress√£o Log√≠stica / Random Forest)": True,
            "Vari√°veis preditoras utilizadas": True,
            "Equa√ß√£o do modelo (Logit)": True,
            "Tabela de coeficientes e signific√¢ncia": True,
            "Matriz de confus√£o": True
        },
        "5. Valida√ß√£o do Modelo": {
            "Acur√°cia, Precision, Recall, F1-Score": True,
            "Curva ROC e AUC": True,
            "Estat√≠stica KS": True,
            "An√°lise de overfitting (curva de perda)": True
        },
        "6. Aperfei√ßoamento": {
            "Limiar de decis√£o ajustado": True,
            "Custo do erro (FN e FP)": True,
            "Compara√ß√£o com modelo base": True
        },
        "7. Pol√≠ticas de Cr√©dito": {
            "Score m√≠nimo para aprova√ß√£o": True,
            "Restri√ß√µes aplicadas (DTI, garantia)": True,
            "Taxa de aprova√ß√£o simulada": True
        },
        "8. Implanta√ß√£o": {
            "Desempenho em novos dados": True,
            "Valida√ß√£o das pol√≠ticas de cr√©dito": True,
            "Conclus√£o sobre prontid√£o para produ√ß√£o": True
        }
    }

    # Interface de sele√ß√£o
    relatorio_final_parts = []

    for secao, itens in secoes.items():
        with st.expander(f"üìå {secao}", expanded=False):
            st.markdown(f"**Incluir nesta se√ß√£o:**")
            for item, default in itens.items():
                if st.checkbox(item, value=default, key=f"chk_{secao}_{item}"):
                    relatorio_final_parts.append(f"- {item}")

    # --- 3. INCLUIR RELAT√ìRIOS INDIVIDUAIS (ZIP) ---
    st.subheader("üìé Incluir relat√≥rios parciais emitidos anteriormente")

    incluir_relatorios = st.checkbox("Incluir todos os relat√≥rios gerados nas p√°ginas anteriores", value=True)

    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zip_file:
        # Simula√ß√£o de relat√≥rios (substitua com os reais se salvos no session_state)
        relatorios_existentes = []

        # Exemplo: se voc√™ salvou relat√≥rios em session_state
        if 'relatorio_acoes' in st.session_state:
            conteudo = "\n".join(st.session_state.relatorio_acoes)
            zip_file.writestr("modelagem_relatorio.txt", conteudo)
            relatorios_existentes.append("Modelagem")

        if 'dados' in st.session_state:
            dados_csv = st.session_state.dados.to_csv(index=False)
            zip_file.writestr("dados_limpos.csv", dados_csv)
            relatorios_existentes.append("Dados Limpos")

        # Adicione outros se existirem...
        # Ex: an√°lise bivariada, valida√ß√£o, etc.

        if not relatorios_existentes:
            zip_file.writestr("README.txt", "Nenhum relat√≥rio parcial foi gerado nas etapas anteriores.\nGere relat√≥rios nas p√°ginas espec√≠ficas para inclu√≠-los aqui.")

    zip_buffer.seek(0)

    # --- 4. GERAR RELAT√ìRIO CONSOLIDADO ---
    if st.button("üìÑ Gerar Relat√≥rio Consolidado", type="primary"):
        if not relatorio_final_parts:
            st.warning("Selecione pelo menos uma se√ß√£o para incluir no relat√≥rio.")
        else:
            st.success("‚úÖ Relat√≥rio consolidado gerado com sucesso!")

            # Monta o relat√≥rio final
            relatorio_completo = f"""
RELAT√ìRIO FINAL DE CREDIT SCORING
==================================

Projeto: {nome_projeto}
Autor: {autor}
Data: {data_relatorio}

SUM√ÅRIO
--------
{chr(10).join(relatorio_final_parts[:10])}
{ '...' if len(relatorio_final_parts) > 10 else '' }

DETALHAMENTO
------------

{chr(10).join([f"{item}" for item in relatorio_final_parts])}

CONCLUS√ÉO
---------
O modelo foi desenvolvido com base em boas pr√°ticas de an√°lise de cr√©dito, desde a limpeza dos dados at√© a valida√ß√£o em novas amostras. Est√° pronto para implanta√ß√£o com monitoramento cont√≠nuo.

Equipe de Risco - {datetime.now().strftime('%Y')}
            """.strip()

            # Mostra o relat√≥rio
            st.text(relatorio_completo)

            # Bot√£o de download do relat√≥rio completo
            st.download_button(
                label="‚¨áÔ∏è Baixar Relat√≥rio (TXT)",
                data=relatorio_completo,
                file_name=f"relatorio_final_{nome_projeto.replace(' ', '_').lower()}.txt",
                mime="text/plain"
            )

    # --- 5. DOWNLOAD DOS RELAT√ìRIOS PARCIAIS ---
    if incluir_relatorios and relatorios_existentes:
        st.download_button(
            label="üì¶ Baixar Todos os Relat√≥rios (ZIP)",
            data=zip_buffer.getvalue(),
            file_name="relatorios_parciais.zip",
            mime="application/zip"
        )
        st.caption(f"Cont√©m: {', '.join(relatorios_existentes)}")

    # --- NAVEGA√á√ÉO ---
    st.markdown("---")
    st.info("‚úÖ Projeto conclu√≠do! Agradecemos pela jornada de an√°lise de cr√©dito.")

if __name__ == "__main__":
    main()
